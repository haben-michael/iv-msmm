mean(tau2.hats>tau^2)
mean(tau2.hats)
tau^2
median(tau2.hats)
hist(tau2.hats)
abline(v=median(tau2.hats))
abline(v=median(tau2.hats),col='red')
by.n
by.n
str(summary(lm(I(y/sigma) ~ 1 + 1/sigma)))
coef(summary(lm(I(y/sigma) ~ 1 + 1/sigma)))
coef(summary(lm(I(y/sigma) ~ 1 + 1/sigma)))['Pr(>|t|)']
names(coef(summary(lm(I(y/sigma) ~ 1 + 1/sigma))))
str(coef(summary(lm(I(y/sigma) ~ 1 + 1/sigma))))
colnames(coef(summary(lm(I(y/sigma) ~ 1 + 1/sigma))))
coef(summary(lm(I(y/sigma) ~ 1 + 1/sigma)))[,'Pr(>|t|)']
hist(p.vals)
mean(p.vals<.05)
plot(ecdf(p.vals))
plot(ecdf(p.vals));abline(a=0,b=1,col='red')
lm(y ~ sigma)
lm(y/sigma ~ 1/sigma)
lm(I(y/sigma) ~ 1/sigma)
lm(I(y/sigma) ~ sigma)
sigma
lm(I(y/sigma) ~ sigma)
lm(I(y/sigma) ~ sigma)
p.vals
hist(p.vals)
idx
idx[idx]
idx[which(idx)]
which(idx)
which(idx)
idx
length(which.idx)
length(which(idx))
rbinom(sum(idx), 1, prob=.7)
length(which(idx))
keep.idx
keep.idx
keep.idx
keep.idx
rm(idx)
len(primes)
gg <- readShapeSpatial('ma_2016/ma_2016')
getwd()
ans
ans
ans
ans
ans*2
var(1/sigma)
(n-1)*sum((1/sigma-mean(1/sigma))^2)
sum((1/sigma-mean(1/sigma))^2)/(n-1)
lm(I(y/sigma) ~ 1 + I(1/sigma))
summary(lm(I(y/sigma) ~ 1 + I(1/sigma)))
lm(I(y/sqrt(sigma^2+tau^2)) ~ 1 + I(1/sqrt(sigma^2+tau^2))
)
lm(I(y/sqrt(sigma^2+tau^2)) ~ 1 + I(1/sqrt(sigma^2+tau^2)))
summary(lm(I(y/sqrt(sigma^2+tau^2)) ~ 1 + I(1/sqrt(sigma^2+tau^2))))
str(summary(lm(I(y/sqrt(sigma^2+tau^2)) ~ 1 + I(1/sqrt(sigma^2+tau^2)))))
resid(lm(I(y/sqrt(sigma^2+tau^2)) ~ 1 + I(1/sqrt(sigma^2+tau^2)))
)
resid(lm(I(y/sqrt(sigma^2+tau^2)) ~ 1 + I(1/sqrt(sigma^2+tau^2)))0
resid(lm(I(y/sqrt(sigma^2+tau^2)) ~ 1 + I(1/sqrt(sigma^2+tau^2))))
sd(resid(lm(I(y/sqrt(sigma^2+tau^2)) ~ 1 + I(1/sqrt(sigma^2+tau^2)))))
summary(lm(I(y/sqrt(sigma^2+tau^2)) ~ 1 + I(1/sqrt(sigma^2+tau^2))))$sigma
summary(egger.lm)
.05/.2
)
coef(summary(egger.lm))
coef(summary(egger.lm))['(Intercept)','t value']
str(by.tau)
matplot(by.tau)
matplot(t(by.tau))
matplot(t(by.tau),pch='.')
by.tau
str(by.tau)
head(by.tau)
fn(.4)
fn(c(.3,.4))
X
proj
head(X%*%solve(t(X)%*%X)%*%t(X)%*%y)
head(fitted(egger.lm))
head(X%*%solve(t(X)%*%X)%*%t(X)%*%y)
head(fitted(egger.lm))
cov(egger.lm)
var(egger.lm)
str(t(y*sqrt(tau^2+sigma^2)))
)
numer
))
str(by.tau)
dev.new()
warnings()
warnings()
by.n
str(by.n)
require(plotly)
by.n.sigma.20 <- by.n
?filled.contour
     x <- 10*1:nrow(volcano)
     y <- 10*1:ncol(volcano)
     filled.contour(x, y, volcano, color = terrain.colors,
         plot.title = title(main = "The Topography of Maunga Whau",
         xlab = "Meters North", ylab = "Meters West"),
         plot.axes = { axis(1, seq(100, 800, by = 100))
                       axis(2, seq(100, 600, by = 100)) },
         key.title = title(main = "Height\n(meters)"),
         key.axes = axis(4, seq(90, 190, by = 10)))  # maybe also asp = 1

str(volcano)
str(by.n)
egger.lm
summary(egger.lm)
n
dev.new()
filled.contour(volcano, color = terrain.colors, asp = 1,
  plot.axes=contour(volcano, add=T) )

dev.new()
rm(sigma)
dev.new()
tau <- 4
sqrt(RSS)
numer
denom
dev.new()
solve(t(X)%*%X)%*%t(X)%*%y
numer
numer
numer/denom
numer/denom
numer*denom
egger.lm
))
qqnorm(numers)
qqnorm(numers)
qqnorm(numers)
qqnorm(numers)
str(numers)
qqnorm(numers)
norm
?norm
summary(egger.lm)
proj
eigen(proj)
eigen(proj)$values
eigen(proj%*%diag(1/sigma))$val
eigen(diag(1/sigma)%*%proj%*%diag(1/sigma))$val
eigen(diag(sigma)%*%proj%*%diag(sigma))$val
1/sigma
plot(eigen(diag(sigma)%*%proj%*%diag(sigma))$val,sigma)
sort(sigma)
    v1 <- matrix(sqrt(1+tau^2/sigma^2))
v2 <- matrix((1/sigma-mean(1/sigma))*sqrt(1+tau^2/sigma^2))
v1%*%t(v1)
str(v1%*%t(v1))
diag(1+tau^2/sigma^2) - 1/n*(v1%*%t(v1)) + 1/(n*(n-1)*var(1/sigma))*(v2%*%t(v2))
eigen(diag(1+tau^2/sigma^2) - 1/n*(v1%*%t(v1)) + 1/(n*(n-1)*var(1/sigma))*(v2%*%t(v2)))$val
eigen(proj)$val
eigen(I-proj)$val
eigen(diag(n)-proj)$val
eigen(I-proj)$val
eigen(proj)$val
eigen(diag(sqrt(1+tau^2/sigma^2))%*%proj%*%diag(sqrt(1+tau^2/sigma^2)))$val
str(v1%*%t(v1))
eigen(diag(1+tau^2/sigma^2) - 1/n*(v1%*%t(v1)) + 1/(n*(n-1)*var(1/sigma))*(v2%*%t(v2)))$val
sort(abs(eigen(diag(1+tau^2/sigma^2) - 1/n*(v1%*%t(v1)) + 1/(n*(n-1)*var(1/sigma))*(v2%*%t(v2)))$val))
eigen(diag(sqrt(tau^2/sigma^2))%*%proj%*%diag(sqrt(tau^2/sigma^2)))$val
eigen(diag(1+tau^2/sigma^2) - 1/n*(v1%*%t(v1)) + 1/(n*(n-1)*var(1/sigma))*(v2%*%t(v2)))$val
eigen(diag(sqrt(tau^2/sigma^2))%*%proj%*%diag(sqrt(tau^2/sigma^2)))$val
eigen(diag(sqrt(1+tau^2/sigma^2))%*%proj%*%diag(sqrt(1+tau^2/sigma^2)))$val
eigen(diag(sqrt(1+tau/sigma^2))%*%proj%*%diag(sqrt(1+tau/sigma^2)))$val
eigen(diag(sqrt(tau/sigma^2))%*%proj%*%diag(sqrt(tau/sigma^2)))$val
eigen(diag(sqrt(1+tau/sigma^2))%*%proj%*%diag(sqrt(1+tau/sigma^2)))$val
eigen(diag(sqrt(1+tau/sigma))%*%proj%*%diag(sqrt(1+tau/sigma)))$val
eigen(diag(sqrt(1+tau))%*%proj%*%diag(sqrt(1+tau)))$val
eigen(diag(sqrt(1+1/sigma))%*%proj%*%diag(sqrt(1+1/sigma)))$val
A
str(A)
eigen(diag(sqrt(1+tau/sigma^2))%*%proj%*%diag(sqrt(1+tau/sigma^2)))$val
eigen(proj)$val
eigen(proj)$vec
?eigen
?eigen
U
lam
rank(proj)
lam
round(lam)
sigma
tau
A
A
t(U) %*% lam %*% U - proj
t(U) %*% lam %*% U - proj
A
A
t(U)%*% rep(1,n)
eigen(A)$val
t(U)%*%rep(1,n)
t(eigen(A)$vec)%*%rep(1,n)
plot(dd)
getwd()
qqnorm(numers)
proj%*%(y/sigma)
X%*%solve(t(X)%*%X)%*%t(X)%*%(y/sigma)
solve(t(X)%*%X)%*%t(X)%*%(y/sigma)
))
nu
str(P)
str(mu)
nu
Lambda
rchisq(2,df=1,ncp=c(1,2))
?rchisq
hist(aa)
hist(bb)
?qqplot
qqplot(rnorm(100),rnorm(1000))
qqplot(rnorm(100),rnorm(1000)); abline(a=0,b=1)
numer/denom
egger.lm
numer
numer
)
c
RSS
numer
numer
denom
coef(egger.lm)
numer
coef(egger.lm)
numer
summary(egger.lm)$sigma
sqrt(RSS)
denom
numer
summary(egger.lm)
numer/denom
numer
numer
numer
Delta
str(fits)
head(t(fits))
u
((n-1)*var(1/sigma))^(-2) * n * ( mean(1/sigma^2)^2*(1+tau^2*mean(1/sigma^2)) - 2*tau^2*mean(1/sigma)*mean(1/sigma^2)*mean(1/sigma^3) - mean(1/sigma)^2*mean(1/sigma^2) + tau^2*mean(1/sigma)^2*mean(1/sigma^4))

u
u
))
RSS
RSS
